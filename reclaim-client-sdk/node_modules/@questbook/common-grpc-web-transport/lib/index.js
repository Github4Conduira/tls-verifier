"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommonTransport = void 0;
const url_1 = __importDefault(require("url"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const make_http_request_1 = require("./make-http-request");
function CommonTransport(config) {
    return opts => makeTransport(opts, config);
}
exports.CommonTransport = CommonTransport;
function makeTransport(options, config) {
    let request;
    return {
        sendMessage(msgBytes) {
            if (!options.methodDefinition.requestStream && !options.methodDefinition.responseStream) {
                // Disable chunked encoding if we are not using streams
                request.writeHeader('Content-Length', msgBytes.byteLength.toString());
            }
            request.write(msgBytes);
            request.end();
        },
        finishSend() {
        },
        start(metadata) {
            const headers = {};
            metadata.forEach((key, values) => {
                headers[key] = values.join(', ');
            });
            const parsedUrl = url_1.default.parse(options.url);
            request = (0, make_http_request_1.makeHttpRequest)({
                host: parsedUrl.hostname,
                port: parsedUrl.port ? parseInt(parsedUrl.port) : undefined,
                path: parsedUrl.path,
                headers: headers,
                method: 'POST',
                log: options.methodDefinition.responseStream,
                secure: parsedUrl.protocol === 'https:',
                makeTLSSocket: config.makeTLSSocket,
                makeSocket: config.makeSocket
            });
            request.onError(err => {
                options.debug && console.log('NodeHttp.error', err);
                options.onEnd(err);
            });
            request.onHeaders((statusCode, _headers) => {
                const headers = filterHeadersForUndefined(_headers);
                options.onHeaders(new grpc_web_1.grpc.Metadata(headers), statusCode);
            });
            request.onData(chunk => {
                options.debug && console.log('NodeHttp.data', chunk);
                options.onChunk(chunk);
            });
            request.onEnd(() => {
                options.debug && console.log('NodeHttp.end');
                options.onEnd();
            });
        },
        cancel() {
            options.debug && console.log('NodeHttp.abort');
            request === null || request === void 0 ? void 0 : request.destroy();
        }
    };
}
function filterHeadersForUndefined(headers) {
    const filteredHeaders = {};
    for (let key in headers) {
        const value = headers[key];
        if (headers.hasOwnProperty(key)) {
            if (value !== undefined) {
                filteredHeaders[key] = value;
            }
        }
    }
    return filteredHeaders;
}
