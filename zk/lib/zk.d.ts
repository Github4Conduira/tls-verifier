/// <reference types="node" />
import { PrivateInput, Proof, PublicInput, VerificationKey, UintArray, ZKParams } from "./types";
/**
 * Generate ZK proof for CHACHA20-CTR encryption.
 * Circuit proves that the ciphertext is a
 * valid encryption of the given plaintext.
 * The plaintext can be partially redacted.
 *
 * @param privateInput private input to the circuit
 * will include the key, iv, and counter
 * @param pub public input to the circuit,
 * will include the ciphertext and redacted plaintext
 * @param zkParams ZK params -- verification key and circuit wasm
 */
export declare function generateProof({ key, iv, startCounter, }: PrivateInput, pub: PublicInput, { zkey, circuitWasm }: ZKParams): Promise<Proof[]>;
/**
 * Verify a ZK proof for CHACHA20-CTR encryption.
 *
 * @param proofs JSON proof generated by "generateProof"
 * @param publicInput
 * @param zkey
 */
export declare function verifyProof(proofs: Proof[], publicInput: PublicInput, zkey: VerificationKey): Promise<void>;
/**
 * Convert a UintArray (uint32array) to a Uint8Array
 */
export declare function toUint8Array(buf: UintArray): Buffer;
